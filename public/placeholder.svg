<?xml version="1.0" encoding="UTF-8"?>
<svg width="800" height="600" viewBox="0 0 800 600" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
  <script>
    window.addEventListener('DOMContentLoaded', () => {
      const svg = document.querySelector('svg');
      const url = new URL(window.location.href);
      const width = url.searchParams.get('width') || 800;
      const height = url.searchParams.get('height') || 600;
      const avatar = url.searchParams.get('avatar') === 'true';
      
      svg.setAttribute('width', width);
      svg.setAttribute('height', height);
      svg.setAttribute('viewBox', `0 0 ${width} ${height}`);
      
      const text = document.querySelector('text.main-text');
      text.setAttribute('x', width / 2);
      text.setAttribute('y', height / 2);
      
      const subText = document.querySelector('text.sub-text');
      if (subText) {
        subText.setAttribute('x', width / 2);
        subText.setAttribute('y', parseInt(height / 2) + 40);
      }
      
      const elements = document.querySelectorAll('.dynamic-size');
      elements.forEach(el => {
        el.setAttribute('width', width);
        el.setAttribute('height', height);
      });
      
      // Avatar mode
      if (avatar) {
        document.querySelector('.avatar-circle').setAttribute('cx', width / 2);
        document.querySelector('.avatar-circle').setAttribute('cy', height / 2);
        document.querySelector('.avatar-circle').setAttribute('r', Math.min(width, height) / 2);
        
        document.querySelector('.avatar-bg').setAttribute('cx', width / 2);
        document.querySelector('.avatar-bg').setAttribute('cy', height / 2);
        document.querySelector('.avatar-bg').setAttribute('r', Math.min(width, height) / 2);
        
        document.querySelector('.avatar-elements').style.display = 'inline';
        document.querySelector('.standard-elements').style.display = 'none';
        
        // Update avatar text
        const avatarText = document.querySelector('text.avatar-text');
        avatarText.setAttribute('x', width / 2);
        avatarText.setAttribute('y', height / 2 + 5);
        
        // Get name from url
        const name = url.searchParams.get('name') || '';
        if (name) {
          // Get first letter or first two letters
          const initials = name.split(' ')
            .map(part => part.charAt(0))
            .join('')
            .substring(0, 2)
            .toUpperCase();
          avatarText.textContent = initials;
        }
      }
    });
  </script>
  
  <defs>
    <linearGradient id="gradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" stop-color="#e2e8f0" />
      <stop offset="50%" stop-color="#cbd5e1" />
      <stop offset="100%" stop-color="#94a3b8" />
    </linearGradient>
    
    <linearGradient id="avatar-gradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" stop-color="#3b82f6" />
      <stop offset="100%" stop-color="#1d4ed8" />
    </linearGradient>
    
    <pattern id="dots" patternUnits="userSpaceOnUse" width="30" height="30">
      <circle cx="15" cy="15" r="2" fill="#64748b" opacity="0.3" />
    </pattern>
    
    <pattern id="grid" patternUnits="userSpaceOnUse" width="40" height="40" patternTransform="rotate(45)">
      <rect width="1" height="40" fill="#64748b" x="0" y="0" opacity="0.2" />
      <rect width="40" height="1" fill="#64748b" x="0" y="0" opacity="0.2" />
    </pattern>
    
    <filter id="shadow">
      <feDropShadow dx="0" dy="2" stdDeviation="2" flood-color="#0f172a" flood-opacity="0.3"/>
    </filter>
  </defs>
  
  <g class="standard-elements">
    <rect class="dynamic-size" width="800" height="600" fill="url(#gradient)" />
    <rect class="dynamic-size" width="800" height="600" fill="url(#dots)" />
    <rect class="dynamic-size" width="800" height="600" fill="url(#grid)" />
    
    <text x="400" y="300" 
      class="main-text"
      font-family="system-ui, -apple-system, sans-serif" 
      font-size="28" 
      font-weight="bold" 
      fill="#1e293b"
      text-anchor="middle"
      filter="url(#shadow)">
      Placeholder Image
    </text>
    
    <text x="400" y="340"
      class="sub-text"
      font-family="system-ui, -apple-system, sans-serif"
      font-size="16"
      fill="#475569"
      text-anchor="middle"
      opacity="0.8">
      Click to upload an image
    </text>
  </g>
  
  <g class="avatar-elements" style="display: none">
    <circle class="avatar-bg" cx="400" cy="300" r="300" fill="url(#avatar-gradient)" />
    <circle class="avatar-circle" cx="400" cy="300" r="300" fill="none" stroke="#fff" stroke-width="2" stroke-opacity="0.2" />
    
    <text x="400" y="305"
      class="avatar-text"
      font-family="system-ui, -apple-system, sans-serif"
      font-size="200"
      font-weight="bold"
      fill="#ffffff"
      text-anchor="middle"
      dominant-baseline="middle">
      L
    </text>
  </g>
</svg>